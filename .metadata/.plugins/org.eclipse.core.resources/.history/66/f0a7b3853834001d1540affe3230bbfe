package curso.api.rest.controller;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import curso.api.rest.model.Usuario;
import curso.api.rest.repository.UsuarioRepository;
//@CrossOrigin(origins = {"*","https://www.google.pt"})//Liberar acesso a dominios no array
//@CrossOrigin libera acesso a todos os dominios
@RestController
@RequestMapping(value = "/usuario")
public class IndexController {
	@Autowired /* Se fosse CDI seria @Inject */
	private UsuarioRepository usuarioRepository;

	/*
	 * @GetMapping(value = "/", produces = "application/json") public ResponseEntity
	 * init(@RequestParam(value = "nome", required = true, defaultValue =
	 * "Nome não foi informado!") String nome, @RequestParam(value = "salario") Long
	 * salario) { System.out.println("parametro recebido: "+nome); return new
	 * ResponseEntity("Olá REST SpringBoot o seu nome é: "+nome+", Salário: "
	 * +salario, HttpStatus.OK); }
	 */
	/*
	 * @GetMapping(value = "/", produces = "application/json") public
	 * ResponseEntity<Usuario> init() { Usuario usuario =new Usuario();
	 * usuario.setId(20L); usuario.setLogin("admin@reinaldo.com");
	 * usuario.setNome("Reinaldo Mendes"); usuario.setSenha("admin");
	 * 
	 * return ResponseEntity.ok(usuario); }
	 */
	/*
	 * @GetMapping(value = "/", produces = "application/json") public
	 * ResponseEntity<List<Usuario>> init() { List<Usuario> usuarios = new
	 * ArrayList<Usuario>(); Usuario usuario1 = new Usuario(); usuario1.setId(20L);
	 * usuario1.setLogin("admin@reinaldo.com"); usuario1.setNome("Reinaldo Mendes");
	 * usuario1.setSenha("admin");
	 * 
	 * Usuario usuario2 = new Usuario(); usuario2.setId(23L);
	 * usuario2.setLogin("admin@reinaldocostamendes.com");
	 * usuario2.setNome("Reinaldo Costa Mendes"); usuario2.setSenha("admin");
	 * usuarios.add(usuario1); usuarios.add(usuario2); return
	 * ResponseEntity.ok(usuarios); }
	 */
	@PostMapping(value = "/", produces = "application/json")
	public ResponseEntity<Usuario> cadastrar(@RequestBody Usuario usuario) {
		for(int pos=0; pos<usuario.getTelefones().size();pos++) {
			usuario.getTelefones().get(pos).setUsuario(usuario);
		}
		String senhaCriptografado =new BCryptPasswordEncoder().encode(usuario.getSenha());
		usuario.setSenha(senhaCriptografado);
		Usuario usuarioSalvo = usuarioRepository.save(usuario);
		return new ResponseEntity<Usuario>(usuarioSalvo, HttpStatus.OK);
	}

	
	
	@PostMapping(value = "/vendausuario", produces = "application/json")
	public ResponseEntity<Usuario> cadastrarvenda(@RequestBody Usuario usuario) {
		for(int pos=0; pos<usuario.getTelefones().size();pos++) {
			usuario.getTelefones().get(pos).setUsuario(usuario);
		}
		Usuario usuarioTemp = usuarioRepository.findUserByLogin(usuario.getLogin());
		if(!usuarioTemp.getSenha().equals(usuario.getSenha())) {
		String senhaCriptografado =new BCryptPasswordEncoder().encode(usuario.getSenha());
		usuario.setSenha(senhaCriptografado);
		}
		Usuario usuarioSalvo = usuarioRepository.save(usuario);
		return new ResponseEntity<Usuario>(usuarioSalvo, HttpStatus.OK);
	}

	@PostMapping(value = "/{iduser}/idvenda/{idvenda}", produces = "application/json")
	public ResponseEntity cadastrarvenda(@PathVariable Long iduser, @PathVariable Long idvenda) {
		return new ResponseEntity("iduser: "+iduser+" ivenda: "+idvenda, HttpStatus.OK);
	}
	@PutMapping(value = "/{iduser}/idvenda/{idvenda}", produces = "application/json")
	public ResponseEntity atualizarvenda(@PathVariable Long iduser, @PathVariable Long idvenda) {
		return new ResponseEntity("atualizar venda iduser: "+iduser+" ivenda: "+idvenda, HttpStatus.OK);
	}
	@PutMapping(value = "/", produces = "application/json")
	public ResponseEntity<Usuario> atualizar(@RequestBody Usuario usuario) {
		for(int pos=0; pos<usuario.getTelefones().size();pos++) {
			usuario.getTelefones().get(pos).setUsuario(usuario);
		}
		Usuario usuarioTemp = usuarioRepository.findUserByLogin(usuario.getLogin());
		if(!usuarioTemp.getSenha().equals(usuario.getSenha())) {
		String senhaCriptografado =new BCryptPasswordEncoder().encode(usuario.getSenha());
		usuario.setSenha(senhaCriptografado);
		}
		Usuario usuarioSalvo = usuarioRepository.save(usuario);
		return new ResponseEntity<Usuario>(usuarioSalvo, HttpStatus.OK);
	}
	
	@GetMapping(value = "/{id}/codigovenda/{venda}", produces = "application/json")
	public ResponseEntity<Usuario> relatorio(@PathVariable("id") Long id, @PathVariable("venda") Long venda) {
		Usuario u = usuarioRepository.findById(id).get();
		return new ResponseEntity(u, HttpStatus.OK);
	}

	@GetMapping(value = "v1/{id}", produces = "application/json")
	public ResponseEntity<Usuario> initV1(@PathVariable("id") Long id) {
		Usuario u = usuarioRepository.findById(id).get();
		return new ResponseEntity(u, HttpStatus.OK);
	}
	
	@GetMapping(value = "v2/{id}", produces = "application/json")
	public ResponseEntity<Usuario> initV2(@PathVariable("id") Long id) {
		Usuario u = usuarioRepository.findById(id).get();
		return new ResponseEntity(u, HttpStatus.OK);
	}
	
	//@CrossOrigin(origins = {"https://localhost:8080"})
	@DeleteMapping(value = "/{id}", produces = "application/text")
	public ResponseEntity<Usuario> delete(@PathVariable("id") Long id) {
		usuarioRepository.deleteById(id);
		return new ResponseEntity("Eliminado com sucesso!",HttpStatus.OK);
	}
	
	//@CrossOrigin(origins = {"https://localhost:8080"})
	/*@DeleteMapping(value = "/{id}", produces = "application/text", headers = "X-API-Version=v2")
	public ResponseEntity<Usuario> deleteV2(@PathVariable("id") Long id) {
		usuarioRepository.deleteById(id);
		return new ResponseEntity("Eliminado com sucesso!",HttpStatus.OK);
	}*/
	
	@GetMapping(value = "/", produces = "application/json")
	public ResponseEntity<List<Usuario>> init() {
		List<Usuario> usuarios = (List<Usuario>) usuarioRepository.findAll();
		return new ResponseEntity(usuarios, HttpStatus.OK);
	}
}
